{"timestamp":"2025-06-13T18:19:07.285796Z","level":"INFO","fields":{"message":"Enabled rule sets: [Constant, Base, Bubble, Minion, Better_AC_Comprehension_Expansion]"},"target":"conjure_oxide::solve"}
{"timestamp":"2025-06-13T18:19:07.286110Z","level":"INFO","fields":{"message":"Rule sets: Constant, Base, Bubble, Minion, Better_AC_Comprehension_Expansion"},"target":"file"}
{"timestamp":"2025-06-13T18:19:07.286329Z","level":"INFO","fields":{"message":"Rules: Rule: constant_evaluator (priority: 9001, from rule set: Constant)\nRule: eval_root (priority: 9001, from rule set: Constant)\nRule: partial_evaluator (priority: 9000, from rule set: Base)\nRule: bubble_up (priority: 8900, from rule set: Bubble)\nRule: expand_bubble (priority: 8900, from rule set: Bubble)\nRule: normalise_associative_commutative (priority: 8900, from rule set: Base)\nRule: eq_to_subset_eq (priority: 8800, from rule set: Base)\nRule: negated_eq_to_neq (priority: 8800, from rule set: Base)\nRule: negated_neq_to_eq (priority: 8800, from rule set: Base)\nRule: normalise_implies_contrapositive (priority: 8800, from rule set: Base)\nRule: normalise_implies_left_distributivity (priority: 8800, from rule set: Base)\nRule: normalise_implies_negation (priority: 8800, from rule set: Base)\nRule: remove_empty_expression (priority: 8800, from rule set: Base)\nRule: remove_unit_vector_and (priority: 8800, from rule set: Base)\nRule: remove_unit_vector_or (priority: 8800, from rule set: Base)\nRule: remove_unit_vector_products (priority: 8800, from rule set: Base)\nRule: remove_unit_vector_sum (priority: 8800, from rule set: Base)\nRule: reorder_product (priority: 8800, from rule set: Base)\nRule: neq_not_eq_sets (priority: 8700, from rule set: Base)\nRule: subset_to_subset_eq_neq (priority: 8700, from rule set: Base)\nRule: subseteq_intersect (priority: 8700, from rule set: Base)\nRule: supset_eq_to_subset_eq (priority: 8700, from rule set: Base)\nRule: supset_to_subset (priority: 8700, from rule set: Base)\nRule: union_subseteq (priority: 8700, from rule set: Base)\nRule: collect_like_terms (priority: 8400, from rule set: Base)\nRule: distribute_negation_over_sum (priority: 8400, from rule set: Base)\nRule: distribute_not_over_and (priority: 8400, from rule set: Base)\nRule: distribute_not_over_or (priority: 8400, from rule set: Base)\nRule: distribute_or_over_and (priority: 8400, from rule set: Base)\nRule: elmininate_double_negation (priority: 8400, from rule set: Base)\nRule: gt_to_geq (priority: 8400, from rule set: Minion)\nRule: lt_to_leq (priority: 8400, from rule set: Minion)\nRule: minus_to_sum (priority: 8400, from rule set: Base)\nRule: normalise_implies_uncurry (priority: 8400, from rule set: Base)\nRule: remove_double_negation (priority: 8400, from rule set: Base)\nRule: simplify_negation_of_product (priority: 8400, from rule set: Base)\nRule: select_representation_matrix (priority: 8001, from rule set: Base)\nRule: record_index_to_bubble (priority: 8000, from rule set: Bubble)\nRule: select_representation (priority: 8000, from rule set: Base)\nRule: tuple_index_to_bubble (priority: 8000, from rule set: Bubble)\nRule: div_to_bubble (priority: 6000, from rule set: Bubble)\nRule: index_to_bubble (priority: 6000, from rule set: Bubble)\nRule: max_to_var (priority: 6000, from rule set: Base)\nRule: min_to_var (priority: 6000, from rule set: Base)\nRule: mod_to_bubble (priority: 6000, from rule set: Bubble)\nRule: pow_to_bubble (priority: 6000, from rule set: Bubble)\nRule: slice_to_bubble (priority: 6000, from rule set: Bubble)\nRule: index_matrix_to_atom (priority: 5000, from rule set: Base)\nRule: substitute_domain_lettings (priority: 5000, from rule set: Base)\nRule: substitute_value_lettings (priority: 5000, from rule set: Base)\nRule: y_plus_k_geq_x_to_ineq (priority: 4800, from rule set: Minion)\nRule: introduce_weighted_sumleq_sumgeq (priority: 4600, from rule set: Minion)\nRule: x_leq_y_plus_k_to_ineq (priority: 4500, from rule set: Minion)\nRule: bool_eq_to_reify (priority: 4400, from rule set: Minion)\nRule: iff_to_eq (priority: 4400, from rule set: Minion)\nRule: introduce_abseq (priority: 4400, from rule set: Minion)\nRule: introduce_element_from_index (priority: 4400, from rule set: Minion)\nRule: introduce_minuseq_from_aux_decl (priority: 4400, from rule set: Minion)\nRule: introduce_minuseq_from_eq (priority: 4400, from rule set: Minion)\nRule: introduce_reifyimply_ineq_from_imply (priority: 4400, from rule set: Minion)\nRule: introduce_wininterval_set_from_indomain (priority: 4400, from rule set: Minion)\nRule: flatten_eq (priority: 4200, from rule set: Minion)\nRule: flatten_generic (priority: 4200, from rule set: Minion)\nRule: flatten_imply (priority: 4200, from rule set: Minion)\nRule: flatten_product (priority: 4200, from rule set: Minion)\nRule: introduce_diveq (priority: 4200, from rule set: Minion)\nRule: introduce_flat_alldiff (priority: 4200, from rule set: Minion)\nRule: introduce_modeq (priority: 4200, from rule set: Minion)\nRule: introduce_poweq (priority: 4200, from rule set: Minion)\nRule: introduce_producteq (priority: 4200, from rule set: Minion)\nRule: geq_to_ineq (priority: 4100, from rule set: Minion)\nRule: leq_to_ineq (priority: 4100, from rule set: Minion)\nRule: not_literal_to_wliteral (priority: 4100, from rule set: Minion)\nRule: not_constraint_to_reify (priority: 4090, from rule set: Minion)\nRule: expand_comprehension_ac (priority: 2001, from rule set: Better_AC_Comprehension_Expansion)\nRule: expand_comprehension (priority: 2000, from rule set: Base)\nRule: index_record_to_atom (priority: 2000, from rule set: Base)\nRule: index_tuple_to_atom (priority: 2000, from rule set: Base)\nRule: matrix_ref_to_atom (priority: 2000, from rule set: Base)\nRule: matrix_to_list (priority: 2000, from rule set: Base)\nRule: record_equality (priority: 2000, from rule set: Base)\nRule: record_to_const (priority: 2000, from rule set: Base)\nRule: slice_matrix_to_atom (priority: 2000, from rule set: Base)\nRule: tuple_equality (priority: 2000, from rule set: Base)\nRule: tuple_inequality (priority: 2000, from rule set: Base)\nRule: tuple_to_constant (priority: 2000, from rule set: Base)\nRule: in_set (priority: 1, from rule set: Base)"},"target":"file"}
{"timestamp":"2025-06-13T18:19:07.286441Z","level":"INFO","fields":{"message":"Input file: colours.eprime"},"target":"file"}
{"timestamp":"2025-06-13T18:19:07.382797Z","level":"INFO","fields":{"message":"extra-rule-checks: enabled"},"target":"conjure_oxide::solve"}
{"timestamp":"2025-06-13T18:19:07.383086Z","level":"TRACE","fields":{"message":"trying to parse domain value: {\"Constant\":{\"ConstantInt\":[{\"TagInt\":[]},1]}}","log.target":"jsonparser","log.module_path":"conjure_core::parse::parse_model","log.file":"crates/conjure_core/src/parse/parse_model.rs","log.line":359},"target":"jsonparser"}
{"timestamp":"2025-06-13T18:19:07.383122Z","level":"TRACE","fields":{"message":".. trying as a positive domain value: {\"Constant\":{\"ConstantInt\":[{\"TagInt\":[]},1]}}","log.target":"jsonparser","log.module_path":"conjure_core::parse::parse_model","log.file":"crates/conjure_core/src/parse/parse_model.rs","log.line":362},"target":"jsonparser"}
{"timestamp":"2025-06-13T18:19:07.383132Z","level":"TRACE","fields":{"message":".. success!","log.target":"jsonparser","log.module_path":"conjure_core::parse::parse_model","log.file":"crates/conjure_core/src/parse/parse_model.rs","log.line":371},"target":"jsonparser"}
{"timestamp":"2025-06-13T18:19:07.383139Z","level":"TRACE","fields":{"message":"trying to parse domain value: {\"Reference\":[{\"Name\":\"n\"},null]}","log.target":"jsonparser","log.module_path":"conjure_core::parse::parse_model","log.file":"crates/conjure_core/src/parse/parse_model.rs","log.line":359},"target":"jsonparser"}
{"timestamp":"2025-06-13T18:19:07.383145Z","level":"TRACE","fields":{"message":".. trying as a positive domain value: {\"Reference\":[{\"Name\":\"n\"},null]}","log.target":"jsonparser","log.module_path":"conjure_core::parse::parse_model","log.file":"crates/conjure_core/src/parse/parse_model.rs","log.line":362},"target":"jsonparser"}
{"timestamp":"2025-06-13T18:19:07.383152Z","level":"TRACE","fields":{"message":".. trying as a negative domain value: {\"Reference\":[{\"Name\":\"n\"},null]}","log.target":"jsonparser","log.module_path":"conjure_core::parse::parse_model","log.file":"crates/conjure_core/src/parse/parse_model.rs","log.line":391},"target":"jsonparser"}
{"timestamp":"2025-06-13T18:19:07.383170Z","level":"TRACE","fields":{"message":".. trying as a domain reference: {\"Reference\":[{\"Name\":\"n\"},null]}","log.target":"jsonparser","log.module_path":"conjure_core::parse::parse_model","log.file":"crates/conjure_core/src/parse/parse_model.rs","log.line":406},"target":"jsonparser"}
{"timestamp":"2025-06-13T18:19:07.383177Z","level":"TRACE","fields":{"message":".. found domain reference to n, trying to resolve it","log.target":"jsonparser","log.module_path":"conjure_core::parse::parse_model","log.file":"crates/conjure_core/src/parse/parse_model.rs","log.line":408},"target":"jsonparser"}
{"timestamp":"2025-06-13T18:19:07.383184Z","level":"TRACE","fields":{"message":".. name exists but is not a value letting!","log.target":"jsonparser","log.module_path":"conjure_core::parse::parse_model","log.file":"crates/conjure_core/src/parse/parse_model.rs","log.line":415},"target":"jsonparser"}
